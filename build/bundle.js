/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n,i,r,o,a={333:(e,t,n)=>{function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.r(t),n.d(t,{default:()=>V});var o=void 0!==n.g&&"[object global]"==={}.toString.call(n.g);function a(e,t){return 0===e.indexOf(t.toLowerCase())?e:"".concat(t.toLowerCase()).concat(e.substr(0,1).toUpperCase()).concat(e.substr(1))}function s(e){return Boolean(e&&1===e.nodeType&&"nodeName"in e&&e.ownerDocument&&e.ownerDocument.defaultView)}function c(e){return!isNaN(parseFloat(e))&&isFinite(e)&&Math.floor(e)==e}function u(e){return/^(https?:)?\/\/((player|www)\.)?vimeo\.com(?=$|\/)/.test(e)}function l(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.id,n=e.url,i=t||n;if(!i)throw new Error("An id or url must be passed, either in an options object or as a data-vimeo-id or data-vimeo-url attribute.");if(c(i))return"https://vimeo.com/".concat(i);if(u(i))return i.replace("http:","https:");if(t)throw new TypeError("“".concat(t,"” is not a valid video id."));throw new TypeError("“".concat(i,"” is not a vimeo.com url."))}var d=void 0!==Array.prototype.indexOf,m="undefined"!=typeof window&&void 0!==window.postMessage;if(!(o||d&&m))throw new Error("Sorry, the Vimeo Player API is not available in this browser.");var f="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{};!function(e){if(!e.WeakMap){var t=Object.prototype.hasOwnProperty,n=function(e,t,n){Object.defineProperty?Object.defineProperty(e,t,{configurable:!0,writable:!0,value:n}):e[t]=n};e.WeakMap=function(){function e(){if(void 0===this)throw new TypeError("Constructor WeakMap requires 'new'");if(n(this,"_id",o("_WeakMap")),arguments.length>0)throw new TypeError("WeakMap iterable is not supported")}function r(e,n){if(!i(e)||!t.call(e,"_id"))throw new TypeError(n+" method called on incompatible receiver "+typeof e)}function o(e){return e+"_"+a()+"."+a()}function a(){return Math.random().toString().substring(2)}return n(e.prototype,"delete",(function(e){if(r(this,"delete"),!i(e))return!1;var t=e[this._id];return!(!t||t[0]!==e||(delete e[this._id],0))})),n(e.prototype,"get",(function(e){if(r(this,"get"),i(e)){var t=e[this._id];return t&&t[0]===e?t[1]:void 0}})),n(e.prototype,"has",(function(e){if(r(this,"has"),!i(e))return!1;var t=e[this._id];return!(!t||t[0]!==e)})),n(e.prototype,"set",(function(e,t){if(r(this,"set"),!i(e))throw new TypeError("Invalid value used as weak map key");var o=e[this._id];return o&&o[0]===e?(o[1]=t,this):(n(e,this._id,[e,t]),this)})),n(e,"_polyfill",!0),e}()}function i(e){return Object(e)===e}}("undefined"!=typeof self?self:"undefined"!=typeof window?window:f);var v,h,p=(v=function(e){var t,n,i;i=function(){var e,t,n,i=Object.prototype.toString,r="undefined"!=typeof setImmediate?function(e){return setImmediate(e)}:setTimeout;try{Object.defineProperty({},"x",{}),e=function(e,t,n,i){return Object.defineProperty(e,t,{value:n,writable:!0,configurable:!1!==i})}}catch(t){e=function(e,t,n){return e[t]=n,e}}function o(e,i){n.add(e,i),t||(t=r(n.drain))}function a(e){var t,n=typeof e;return null==e||"object"!=n&&"function"!=n||(t=e.then),"function"==typeof t&&t}function s(){for(var e=0;e<this.chain.length;e++)c(this,1===this.state?this.chain[e].success:this.chain[e].failure,this.chain[e]);this.chain.length=0}function c(e,t,n){var i,r;try{!1===t?n.reject(e.msg):(i=!0===t?e.msg:t.call(void 0,e.msg))===n.promise?n.reject(TypeError("Promise-chain cycle")):(r=a(i))?r.call(i,n.resolve,n.reject):n.resolve(i)}catch(e){n.reject(e)}}function u(e){var t,n=this;if(!n.triggered){n.triggered=!0,n.def&&(n=n.def);try{(t=a(e))?o((function(){var i=new m(n);try{t.call(e,(function(){u.apply(i,arguments)}),(function(){l.apply(i,arguments)}))}catch(e){l.call(i,e)}})):(n.msg=e,n.state=1,n.chain.length>0&&o(s,n))}catch(e){l.call(new m(n),e)}}}function l(e){var t=this;t.triggered||(t.triggered=!0,t.def&&(t=t.def),t.msg=e,t.state=2,t.chain.length>0&&o(s,t))}function d(e,t,n,i){for(var r=0;r<t.length;r++)!function(r){e.resolve(t[r]).then((function(e){n(r,e)}),i)}(r)}function m(e){this.def=e,this.triggered=!1}function f(e){this.promise=e,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}function v(e){if("function"!=typeof e)throw TypeError("Not a function");if(0!==this.__NPO__)throw TypeError("Not a promise");this.__NPO__=1;var t=new f(this);this.then=function(e,n){var i={success:"function"!=typeof e||e,failure:"function"==typeof n&&n};return i.promise=new this.constructor((function(e,t){if("function"!=typeof e||"function"!=typeof t)throw TypeError("Not a function");i.resolve=e,i.reject=t})),t.chain.push(i),0!==t.state&&o(s,t),i.promise},this.catch=function(e){return this.then(void 0,e)};try{e.call(void 0,(function(e){u.call(t,e)}),(function(e){l.call(t,e)}))}catch(e){l.call(t,e)}}n=function(){var e,n,i;function r(e,t){this.fn=e,this.self=t,this.next=void 0}return{add:function(t,o){i=new r(t,o),n?n.next=i:e=i,n=i,i=void 0},drain:function(){var i=e;for(e=n=t=void 0;i;)i.fn.call(i.self),i=i.next}}}();var h=e({},"constructor",v,!1);return v.prototype=h,e(h,"__NPO__",0,!1),e(v,"resolve",(function(e){return e&&"object"==typeof e&&1===e.__NPO__?e:new this((function(t,n){if("function"!=typeof t||"function"!=typeof n)throw TypeError("Not a function");t(e)}))})),e(v,"reject",(function(e){return new this((function(t,n){if("function"!=typeof t||"function"!=typeof n)throw TypeError("Not a function");n(e)}))})),e(v,"all",(function(e){var t=this;return"[object Array]"!=i.call(e)?t.reject(TypeError("Not an array")):0===e.length?t.resolve([]):new t((function(n,i){if("function"!=typeof n||"function"!=typeof i)throw TypeError("Not a function");var r=e.length,o=Array(r),a=0;d(t,e,(function(e,t){o[e]=t,++a===r&&n(o)}),i)}))})),e(v,"race",(function(e){var t=this;return"[object Array]"!=i.call(e)?t.reject(TypeError("Not an array")):new t((function(n,i){if("function"!=typeof n||"function"!=typeof i)throw TypeError("Not a function");d(t,e,(function(e,t){n(t)}),i)}))})),v},(n=f)[t="Promise"]=n[t]||i(),e.exports&&(e.exports=n[t])},v(h={exports:{}}),h.exports),y=new WeakMap;function g(e,t,n){var i=y.get(e.element)||{};t in i||(i[t]=[]),i[t].push(n),y.set(e.element,i)}function E(e,t){return(y.get(e.element)||{})[t]||[]}function b(e,t,n){var i=y.get(e.element)||{};if(!i[t])return!0;if(!n)return i[t]=[],y.set(e.element,i),!0;var r=i[t].indexOf(n);return-1!==r&&i[t].splice(r,1),y.set(e.element,i),i[t]&&0===i[t].length}function w(e,t){var n=y.get(e);y.set(t,n),y.delete(e)}var T=["autopause","autoplay","background","byline","color","controls","dnt","height","id","interactive_params","keyboard","loop","maxheight","maxwidth","muted","playsinline","portrait","responsive","speed","texttrack","title","transparent","url","width"];function C(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return T.reduce((function(t,n){var i=e.getAttribute("data-vimeo-".concat(n));return(i||""===i)&&(t[n]=""===i?1:i),t}),t)}function S(e,t){var n=e.html;if(!t)throw new TypeError("An element must be provided");if(null!==t.getAttribute("data-vimeo-initialized"))return t.querySelector("iframe");var i=document.createElement("div");return i.innerHTML=n,t.appendChild(i.firstChild),t.setAttribute("data-vimeo-initialized","true"),t.querySelector("iframe")}function _(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0;return new Promise((function(i,r){if(!u(e))throw new TypeError("“".concat(e,"” is not a vimeo.com url."));var o="https://vimeo.com/api/oembed.json?url=".concat(encodeURIComponent(e));for(var a in t)t.hasOwnProperty(a)&&(o+="&".concat(a,"=").concat(encodeURIComponent(t[a])));var s="XDomainRequest"in window?new XDomainRequest:new XMLHttpRequest;s.open("GET",o,!0),s.onload=function(){if(404!==s.status)if(403!==s.status)try{var t=JSON.parse(s.responseText);if(403===t.domain_status_code)return S(t,n),void r(new Error("“".concat(e,"” is not embeddable.")));i(t)}catch(e){r(e)}else r(new Error("“".concat(e,"” is not embeddable.")));else r(new Error("“".concat(e,"” was not found.")))},s.onerror=function(){var e=s.status?" (".concat(s.status,")"):"";r(new Error("There was an error fetching the embed code from Vimeo".concat(e,".")))},s.send()}))}function k(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){return console.warn(e),{}}return e}function M(e,t,n){if(e.element.contentWindow&&e.element.contentWindow.postMessage){var i={method:t};void 0!==n&&(i.value=n);var r=parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\d+).*$/,"$1"));r>=8&&r<10&&(i=JSON.stringify(i)),e.element.contentWindow.postMessage(i,e.origin)}}function N(e,t){var n,i=[];if((t=k(t)).event)"error"===t.event&&E(e,t.data.method).forEach((function(n){var i=new Error(t.data.message);i.name=t.data.name,n.reject(i),b(e,t.data.method,n)})),i=E(e,"event:".concat(t.event)),n=t.data;else if(t.method){var r=function(e,t){var n=E(e,t);if(n.length<1)return!1;var i=n.shift();return b(e,t,i),i}(e,t.method);r&&(i.push(r),n=t.value)}i.forEach((function(t){try{if("function"==typeof t)return void t.call(e,n);t.resolve(n)}catch(e){}}))}var L=new WeakMap,I=new WeakMap,O={},P=function(){function e(t){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(i(this,e),window.jQuery&&t instanceof jQuery&&(t.length>1&&window.console&&console.warn&&console.warn("A jQuery object with multiple elements was passed, using the first element."),t=t[0]),"undefined"!=typeof document&&"string"==typeof t&&(t=document.getElementById(t)),!s(t))throw new TypeError("You must pass either a valid element or a valid id.");if("IFRAME"!==t.nodeName){var o=t.querySelector("iframe");o&&(t=o)}if("IFRAME"===t.nodeName&&!u(t.getAttribute("src")||""))throw new Error("The player element passed isn’t a Vimeo embed.");if(L.has(t))return L.get(t);this._window=t.ownerDocument.defaultView,this.element=t,this.origin="*";var a=new p((function(e,i){if(n._onMessage=function(t){if(u(t.origin)&&n.element.contentWindow===t.source){"*"===n.origin&&(n.origin=t.origin);var r=k(t.data);if(r&&"error"===r.event&&r.data&&"ready"===r.data.method){var o=new Error(r.data.message);return o.name=r.data.name,void i(o)}var a=r&&"ready"===r.event,s=r&&"ping"===r.method;if(a||s)return n.element.setAttribute("data-ready","true"),void e();N(n,r)}},n._window.addEventListener("message",n._onMessage),"IFRAME"!==n.element.nodeName){var o=C(t,r);_(l(o),o,t).then((function(e){var i=S(e,t);return n.element=i,n._originalElement=t,w(t,i),L.set(n.element,n),e})).catch(i)}}));if(I.set(this,a),L.set(this.element,this),"IFRAME"===this.element.nodeName&&M(this,"ping"),O.isEnabled){var c=function(){return O.exit()};this.fullscreenchangeHandler=function(){O.isFullscreen?g(n,"event:exitFullscreen",c):b(n,"event:exitFullscreen",c),n.ready().then((function(){M(n,"fullscreenchange",O.isFullscreen)}))},O.on("fullscreenchange",this.fullscreenchangeHandler)}return this}var t,n;return t=e,n=[{key:"callMethod",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new p((function(i,r){return t.ready().then((function(){g(t,e,{resolve:i,reject:r}),M(t,e,n)})).catch(r)}))}},{key:"get",value:function(e){var t=this;return new p((function(n,i){return e=a(e,"get"),t.ready().then((function(){g(t,e,{resolve:n,reject:i}),M(t,e)})).catch(i)}))}},{key:"set",value:function(e,t){var n=this;return new p((function(i,r){if(e=a(e,"set"),null==t)throw new TypeError("There must be a value to set.");return n.ready().then((function(){g(n,e,{resolve:i,reject:r}),M(n,e,t)})).catch(r)}))}},{key:"on",value:function(e,t){if(!e)throw new TypeError("You must pass an event name.");if(!t)throw new TypeError("You must pass a callback function.");if("function"!=typeof t)throw new TypeError("The callback must be a function.");0===E(this,"event:".concat(e)).length&&this.callMethod("addEventListener",e).catch((function(){})),g(this,"event:".concat(e),t)}},{key:"off",value:function(e,t){if(!e)throw new TypeError("You must pass an event name.");if(t&&"function"!=typeof t)throw new TypeError("The callback must be a function.");b(this,"event:".concat(e),t)&&this.callMethod("removeEventListener",e).catch((function(e){}))}},{key:"loadVideo",value:function(e){return this.callMethod("loadVideo",e)}},{key:"ready",value:function(){var e=I.get(this)||new p((function(e,t){t(new Error("Unknown player. Probably unloaded."))}));return p.resolve(e)}},{key:"addCuePoint",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.callMethod("addCuePoint",{time:e,data:t})}},{key:"removeCuePoint",value:function(e){return this.callMethod("removeCuePoint",e)}},{key:"enableTextTrack",value:function(e,t){if(!e)throw new TypeError("You must pass a language.");return this.callMethod("enableTextTrack",{language:e,kind:t})}},{key:"disableTextTrack",value:function(){return this.callMethod("disableTextTrack")}},{key:"pause",value:function(){return this.callMethod("pause")}},{key:"play",value:function(){return this.callMethod("play")}},{key:"requestFullscreen",value:function(){return O.isEnabled?O.request(this.element):this.callMethod("requestFullscreen")}},{key:"exitFullscreen",value:function(){return O.isEnabled?O.exit():this.callMethod("exitFullscreen")}},{key:"getFullscreen",value:function(){return O.isEnabled?p.resolve(O.isFullscreen):this.get("fullscreen")}},{key:"requestPictureInPicture",value:function(){return this.callMethod("requestPictureInPicture")}},{key:"exitPictureInPicture",value:function(){return this.callMethod("exitPictureInPicture")}},{key:"getPictureInPicture",value:function(){return this.get("pictureInPicture")}},{key:"unload",value:function(){return this.callMethod("unload")}},{key:"destroy",value:function(){var e=this;return new p((function(t){if(I.delete(e),L.delete(e.element),e._originalElement&&(L.delete(e._originalElement),e._originalElement.removeAttribute("data-vimeo-initialized")),e.element&&"IFRAME"===e.element.nodeName&&e.element.parentNode&&(e.element.parentNode.parentNode&&e._originalElement&&e._originalElement!==e.element.parentNode?e.element.parentNode.parentNode.removeChild(e.element.parentNode):e.element.parentNode.removeChild(e.element)),e.element&&"DIV"===e.element.nodeName&&e.element.parentNode){e.element.removeAttribute("data-vimeo-initialized");var n=e.element.querySelector("iframe");n&&n.parentNode&&(n.parentNode.parentNode&&e._originalElement&&e._originalElement!==n.parentNode?n.parentNode.parentNode.removeChild(n.parentNode):n.parentNode.removeChild(n))}e._window.removeEventListener("message",e._onMessage),O.isEnabled&&O.off("fullscreenchange",e.fullscreenchangeHandler),t()}))}},{key:"getAutopause",value:function(){return this.get("autopause")}},{key:"setAutopause",value:function(e){return this.set("autopause",e)}},{key:"getBuffered",value:function(){return this.get("buffered")}},{key:"getCameraProps",value:function(){return this.get("cameraProps")}},{key:"setCameraProps",value:function(e){return this.set("cameraProps",e)}},{key:"getChapters",value:function(){return this.get("chapters")}},{key:"getCurrentChapter",value:function(){return this.get("currentChapter")}},{key:"getColor",value:function(){return this.get("color")}},{key:"setColor",value:function(e){return this.set("color",e)}},{key:"getCuePoints",value:function(){return this.get("cuePoints")}},{key:"getCurrentTime",value:function(){return this.get("currentTime")}},{key:"setCurrentTime",value:function(e){return this.set("currentTime",e)}},{key:"getDuration",value:function(){return this.get("duration")}},{key:"getEnded",value:function(){return this.get("ended")}},{key:"getLoop",value:function(){return this.get("loop")}},{key:"setLoop",value:function(e){return this.set("loop",e)}},{key:"setMuted",value:function(e){return this.set("muted",e)}},{key:"getMuted",value:function(){return this.get("muted")}},{key:"getPaused",value:function(){return this.get("paused")}},{key:"getPlaybackRate",value:function(){return this.get("playbackRate")}},{key:"setPlaybackRate",value:function(e){return this.set("playbackRate",e)}},{key:"getPlayed",value:function(){return this.get("played")}},{key:"getQualities",value:function(){return this.get("qualities")}},{key:"getQuality",value:function(){return this.get("quality")}},{key:"setQuality",value:function(e){return this.set("quality",e)}},{key:"getSeekable",value:function(){return this.get("seekable")}},{key:"getSeeking",value:function(){return this.get("seeking")}},{key:"getTextTracks",value:function(){return this.get("textTracks")}},{key:"getVideoEmbedCode",value:function(){return this.get("videoEmbedCode")}},{key:"getVideoId",value:function(){return this.get("videoId")}},{key:"getVideoTitle",value:function(){return this.get("videoTitle")}},{key:"getVideoWidth",value:function(){return this.get("videoWidth")}},{key:"getVideoHeight",value:function(){return this.get("videoHeight")}},{key:"getVideoUrl",value:function(){return this.get("videoUrl")}},{key:"getVolume",value:function(){return this.get("volume")}},{key:"setVolume",value:function(e){return this.set("volume",e)}}],n&&r(t.prototype,n),e}();o||(O=function(){var e=function(){for(var e,t=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n=0,i=t.length,r={};n<i;n++)if((e=t[n])&&e[1]in document){for(n=0;n<e.length;n++)r[t[0][n]]=e[n];return r}return!1}(),t={fullscreenchange:e.fullscreenchange,fullscreenerror:e.fullscreenerror},n={request:function(t){return new Promise((function(i,r){var o=function e(){n.off("fullscreenchange",e),i()};n.on("fullscreenchange",o);var a=(t=t||document.documentElement)[e.requestFullscreen]();a instanceof Promise&&a.then(o).catch(r)}))},exit:function(){return new Promise((function(t,i){if(n.isFullscreen){var r=function e(){n.off("fullscreenchange",e),t()};n.on("fullscreenchange",r);var o=document[e.exitFullscreen]();o instanceof Promise&&o.then(r).catch(i)}else t()}))},on:function(e,n){var i=t[e];i&&document.addEventListener(i,n)},off:function(e,n){var i=t[e];i&&document.removeEventListener(i,n)}};return Object.defineProperties(n,{isFullscreen:{get:function(){return Boolean(document[e.fullscreenElement])}},element:{enumerable:!0,get:function(){return document[e.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(document[e.fullscreenEnabled])}}}),n}(),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,t=[].slice.call(e.querySelectorAll("[data-vimeo-id], [data-vimeo-url]")),n=function(e){"console"in window&&console.error&&console.error("There was an error creating an embed: ".concat(e))};t.forEach((function(e){try{if(null!==e.getAttribute("data-vimeo-defer"))return;var t=C(e);_(l(t),t,e).then((function(t){return S(t,e)})).catch(n)}catch(e){n(e)}}))}(),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document;if(!window.VimeoPlayerResizeEmbeds_){window.VimeoPlayerResizeEmbeds_=!0;var t=function(t){if(u(t.origin)&&t.data&&"spacechange"===t.data.event)for(var n=e.querySelectorAll("iframe"),i=0;i<n.length;i++)if(n[i].contentWindow===t.source){n[i].parentElement.style.paddingBottom="".concat(t.data.data[0].bottom,"px");break}};window.addEventListener("message",t)}}());const V=P},393:(e,t)=>{t.__esModule=!0,t.getNavigator=void 0,t.getNavigator=function(){return navigator}},109:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,r)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};t.__esModule=!0,r(n(454),t)},454:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n);var r=Object.getOwnPropertyDescriptor(t,n);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,i,r)}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]});t.__esModule=!0,t.isMobile=void 0,i(t,n(267),"isMobile")},267:(e,t,n)=>{t.__esModule=!0,t.isMobile=void 0;var i=n(393);t.isMobile=function(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test((0,i.getNavigator)().userAgent)}},143:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setOverlayHeight=t.appendStyle=t.setRefreshAppListener=t.populateDomFields=void 0;var i=n(109),r=n(242),o=n(662),a=n(367);t.populateDomFields=function(){var e=(0,a.getState)(),t=e.currentCityVideoList[e.selectedVideoId];d(t.address),f(t),v(e),p(e),m()},t.setRefreshAppListener=function(){document.addEventListener(r.stateHasChangedEventName,t.populateDomFields)},t.appendStyle=function(){(0,i.isMobile)()?c():(u(),s())},t.setOverlayHeight=function(){var e,t=null!==(e=document.getElementById("player").children[0].clientHeight)&&void 0!==e?e:600,n=document.body.clientHeight-t;document.getElementById(o.OVERLAY_ID).style.height="".concat(n,"px")};var s=function(){l(o.NAV_STYLE_SHEET_REF)},c=function(){l(o.MOBILE_STYLE_SHEET_REF)},u=function(){l(o.DESKTOP_STYLE_SHEET_REF)},l=function(e){var t=document.createElement("link");t.rel="stylesheet",t.href=e,document.head.appendChild(t)},d=function(e){document.getElementById(o.ADDRESS_ID).innerText=e},m=function(){var e=document.getElementById(o.OVERLAY_IMG_ID),t=(0,a.getCurrentVideo)().overlay;t?(e.src="./overlays/".concat(t),e.classList.remove("hidden")):e.classList.add("hidden")},f=function(e){var t="Music by <a href='".concat(e.musicianSite,"' target='_blank'>").concat(e.musician,"</a>");e.extraInfo&&(t+="</br> </br>".concat(e.extraInfo,"</br> </br>")),document.getElementById(o.ARTIST_ID).innerHTML=t},v=function(e){h(o.PREV_CITY_LABEL_ID,e.prevCity.label),h(o.NEXT_CITY_LABEL_ID,e.nextCity.label)},h=function(e,t){document.getElementById(e).innerText=t},p=function(e){e.currentCityVideoList.length<2?y():E()},y=function(){g(o.PREV_VIDEO_ID),g(o.NEXT_VIDEO_ID)},g=function(e){document.getElementById(e).classList.add("hidden")},E=function(){b(o.PREV_VIDEO_ID),b(o.NEXT_VIDEO_ID)},b=function(e){document.getElementById(e).classList.remove("hidden")}},242:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setScreenOrientationEvent=t.triggerRefreshApp=t.stateHasChangedEventName=t.setNavigationsEvents=t.prevVideoClickedEventName=t.nextVideoClickedEventName=t.prevCityClickEventName=t.nextCityClickEventName=void 0;var i=n(662);t.nextCityClickEventName="next-city-clicked",t.prevCityClickEventName="prev-city-clicked",t.nextVideoClickedEventName="next-video-clicked",t.prevVideoClickedEventName="prev-video-clicked",t.setNavigationsEvents=function(){var e=new CustomEvent(t.nextCityClickEventName),n=new CustomEvent(t.prevCityClickEventName),o=new CustomEvent(t.nextVideoClickedEventName),a=new CustomEvent(t.prevVideoClickedEventName);r(i.NEXT_CITY_BUTTON_ID,e),r(i.PREV_CITY_BUTTON_ID,n),r(i.NEXT_VIDEO_ID,o),r(i.PREV_VIDEO_ID,a)};var r=function(e,t){document.getElementById(e).onclick=function(e){e.preventDefault(),document.dispatchEvent(t)}};t.stateHasChangedEventName="state-has-changed",t.triggerRefreshApp=function(){var e=new CustomEvent(t.stateHasChangedEventName);document.dispatchEvent(e)},t.setScreenOrientationEvent=function(){screen.orientation&&screen.orientation.addEventListener("change",(function(){setTimeout((function(){window.scrollTo(0,document.body.scrollHeight)}),100)}))}},865:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setMouseMoveEvent=void 0;var i,r=n(662),o=1;t.setMouseMoveEvent=function(){window.onmousemove=function(){c(),o=1,i&&window.clearTimeout(i),a()}};var a=function(){i=setTimeout((function(){5===o?s():(o++,a())}),500)},s=function(){var e=document.getElementById(r.OVERLAY_ID);e.classList.remove("fade-in"),e.classList.add("fade-out")},c=function(){var e=document.getElementById(r.OVERLAY_ID);e.classList.add("fade-in"),e.classList.remove("fade-out")}},251:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.resumeVideo=t.initializePlayer=void 0;var i,r=n(333),o=n(109),a=n(143),s=n(242),c=n(367),u=!1,l=!1;t.initializePlayer=function(e){var t={id:e,loop:!0,controls:!1,autoplay:!0,responsive:!0};i=new r.default("player",t),document.addEventListener(s.stateHasChangedEventName,d),i.ready().then((function(){l=!0,(0,o.isMobile)()&&(0,a.setOverlayHeight)(),i.play()}))},t.resumeVideo=function(){l&&(u?(i.pause(),u=!u):(i.play(),u=!u))};var d=function(){var e=(0,c.getState)(),t=e.currentCityVideoList[e.selectedVideoId];i.loadVideo(t.id),i.play()}},662:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OVERLAY_ID=t.NAV_STYLE_SHEET_REF=t.MOBILE_STYLE_SHEET_REF=t.DESKTOP_STYLE_SHEET_REF=t.OVERLAY_IMG_ID=t.PREV_VIDEO_ID=t.NEXT_VIDEO_ID=t.PREV_CITY_BUTTON_ID=t.NEXT_CITY_BUTTON_ID=t.PREV_CITY_LABEL_ID=t.NEXT_CITY_LABEL_ID=t.ARTIST_ID=t.ADDRESS_ID=void 0,t.ADDRESS_ID="address",t.ARTIST_ID="artistName",t.NEXT_CITY_LABEL_ID="next-city-label",t.PREV_CITY_LABEL_ID="prev-city-label",t.NEXT_CITY_BUTTON_ID="next-city",t.PREV_CITY_BUTTON_ID="prev-city",t.NEXT_VIDEO_ID="nextVideo",t.PREV_VIDEO_ID="prevVideo",t.OVERLAY_IMG_ID="overlay-img",t.DESKTOP_STYLE_SHEET_REF="desktop.css",t.MOBILE_STYLE_SHEET_REF="mobile.css",t.NAV_STYLE_SHEET_REF="nav.css",t.OVERLAY_ID="overlay"},367:function(e,t,n){var i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},i.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.getCurrentVideo=t.getState=t.initState=void 0;var r,o=n(626),a=n(242),s=[];t.initState=function(){o.map((function(e){s.push({city:e.city,videos:e.videos})}));var e={label:s[0].city,id:0},t={label:s[1].city,id:1},n={label:s[s.length-1].city,id:s.length-1},i=s[0].videos;r={currentCity:e,nextCity:t,prevCity:n,selectedVideoId:0,currentCityVideoList:i},c(),d()},t.getState=function(){return r},t.getCurrentVideo=function(){var e=r.selectedVideoId;return r.currentCityVideoList[e]};var c=function(){document.addEventListener(a.nextCityClickEventName,u),document.addEventListener(a.prevCityClickEventName,l)},u=function(){var e,t=r.currentCity,n=r.nextCity,i=r.nextCity.id+1;e=i===s.length?{label:s[0].city,id:0}:{id:i,label:s[i].city};var o=s[n.id].videos;r={prevCity:t,currentCity:n,nextCity:e,selectedVideoId:0,currentCityVideoList:o},(0,a.triggerRefreshApp)()},l=function(){var e=r.currentCity,t=r.prevCity,n=void 0,i=r.prevCity.id-1;if(i<0){var o=s.length-1;n={label:s[o].city,id:o}}else n={id:i,label:s[i].city};var c=s[t.id].videos;r={prevCity:n,currentCity:t,nextCity:e,selectedVideoId:0,currentCityVideoList:c},(0,a.triggerRefreshApp)()},d=function(){document.addEventListener(a.nextVideoClickedEventName,m),document.addEventListener(a.prevVideoClickedEventName,f)},m=function(){var e=r.selectedVideoId+1;e===r.currentCityVideoList.length&&(e=0),r=i(i({},r),{selectedVideoId:e}),(0,a.triggerRefreshApp)()},f=function(){var e=r.selectedVideoId-1;e<0&&(e=r.currentCityVideoList.length-1),r=i(i({},r),{selectedVideoId:e}),(0,a.triggerRefreshApp)()}},626:e=>{e.exports=JSON.parse('[{"city":"Montreal","videos":[{"id":602739285,"musician":"Dustin Finer ","musicianSite":"https://dustinfiner.com/ ","address":"Parc Vinet, 550 Rue Vinet, Montréal, QC H3J 2L5 ","extraInfo":"Recording, mixing, and mastering by Ricardo Morejon "},{"id":602740339,"musician":"Nick Kuepfer","musicianSite":"https://nickkuepfer.bandcamp.com/","address":"4141 Av. Pierre-de Coubertin, Montréal, QC H1V 3N7"},{"id":602743917,"musician":"Smileswithteeth","musicianSite":"https://smileswithteeth.bandcamp.com/","address":"890 Rue Saint Maurice, Montréal, QC H3C 1L7"},{"id":602745046,"musician":"Desert Bloom","musicianSite":"https://soundcloud.com/desertbloom","address":"4515 Boulevard Rosemont, Montréal, QC H1T 2E1"},{"id":602747993,"musician":"Racine","musicianSite":"https://racine.bandcamp.com","address":"967 Rue Wellington, Montréal, QC"},{"id":602757723,"musician":"TODDLER","musicianSite":"https://toddler.bandcamp.com/","address":"5788 Blvd. St Laurent, Montréal, QC H2T 1S9"},{"id":602760225,"musician":"Róża","musicianSite":"https://emilyroslynhoppe.bandcamp.com","address":"75 Blvd. René-Lévesque O, Montréal, QC H2Z 1A4"},{"id":602762140,"musician":"Les Elohims","musicianSite":"https://leselohims.bandcamp.com/","address":"3284 Rue Ontario E, Montréal, QC H1W 1P6","extraInfo":"and W. Crosson"},{"id":602765375,"musician":"Ziya Tabassian","musicianSite":"http://www.ziyatabassian.com/","address":"400 Rue de Malines, Montréal, QC H2L 4P4"},{"id":602766743,"musician":"Kyle Bobby Dunn","musicianSite":"https://kylebobbydunn.bandcamp.com/","address":"357 Rue de la Commune O, Montréal, QC H2Y 2E2"},{"id":602769709,"musician":"joni void","musicianSite":"https://jonivoid.bandcamp.com/","address":"4483 Blvd. St Laurent, Montréal, QC H2W 1Z8"},{"id":602771703,"musician":"Namoo Nara","musicianSite":"https://open.spotify.com/artist/6Iij5022xBupynFqNYjdD9","address":"251 Rue Saint-Jacques, Montréal, QC H2Y 1M6, Canada"},{"id":602773380,"musician":"Felicia Lush","musicianSite":"https://soundcloud.com/felicia_lush","address":"11 Rue Saint-Catherine O, Montréal, QC H2X 1Z5"},{"id":602775074,"musician":"Mediteranos","musicianSite":"https://mediteranos.bandcamp.com/","address":"1097-1063 Rue Saint-Gregoire Montréal, QC H2J 3K3"},{"id":602777439,"musician":"Anomalie","musicianSite":"https://anomaliebeats.com/","address":"L\'Astral, 305 Rue Sainte-Catherine O, Montréal, QC H2X 2A3"},{"id":602779097,"musician":"Christian Carrière","musicianSite":"http://christiancarriere.com","address":"465 Rue Saint Jean, Montréal, QC H2Y 1V8"},{"id":602782622,"musician":"Echo Beach","musicianSite":"https://echobeach.bandcamp.com/","address":"Les Appartements Square Angus, 3300 Rue William-Tremblay, Montréal, QC H1Y 3P5"},{"id":602785405,"musician":"Balsam County","musicianSite":"https://balsamcounty.bandcamp.com/","address":"9594 Rue Notre-Dame Est, Montréal, QC H1L 3P4","extraInfo":"Written and performed by Corey Tardiff and Matt Gardiner"},{"id":602788109,"musician":"Red Crescent Moon","musicianSite":"https://redcrescentmoon.bandcamp.com/","address":"612 Rue St Jacques, Montréal, QC H3C 4M8"},{"id":602789873,"musician":"Lonely Boa","musicianSite":"https://lonelyboa.bandcamp.com/","address":"Boulevard Robert-Bourassa, Montréal, QC,"},{"id":602791657,"musician":"Amir Amiri","musicianSite":"https://amiramiri.com/","address":"Complexe Desjardins, 150 Rue Saint-Catherine O, Montréal, QC H2X 3Y2"},{"id":602796017,"musician":"Blue Odeur","musicianSite":"https://blueodeur.bandcamp.com","address":"5112 Avenue du Parc, Montréal, QC H2V 4G5"},{"id":602797402,"musician":"Kyle Bobby Dunn","musicianSite":"https://kylebobbydunn.bandcamp.com","address":"262 Rue St Jacques, Montréal, QC H2Y 2S4"},{"id":602799273,"musician":"Black Givre","musicianSite":"https://blackgivre.bandcamp.com/","address":"4545 Av. Pierre-de Coubertin, Montréal, QC H1V 3N7"},{"id":602799901,"musician":"Orlando Gloom","musicianSite":"https://orlandogloom.bandcamp.com/","address":"24 Avenue-du-Mont-Royal O, Montréal, QC H2T 2S2"},{"id":610680955,"musician":"Anthony Salvo","musicianSite":"https://www.salvosound.com/","address":"1230 Blvd St-Laurent, Montréal, QC H2X 2S5"},{"id":610694704,"musician":"Mr. Pöng","musicianSite":"https://www.mstrpong.com","address":"3535 Rue St Denis, Montréal, QC H2X 3P1","extraInfo":"Artist: Mr. Pöng </br> Steelpan: Mr. Pöng </br> Bass Guitar: Mathieu Lefebvre </br>  Producer: Moodboards\\""},{"id":610685415,"musician":"Hellenica","musicianSite":"https://hellenicamusic.com","address":"1700 Rue Jean Talon E, Montréal, QC H2E 1T2"},{"id":610700219,"musician":"Above the Snow Line","musicianSite":"https://www.abovethesnowline.com/","address":"9345 Rue Notre-Dame Est, Montréal, QC H1L 3N7"}]},{"city":"Quebec","videos":[{"id":695083503,"musician":"Michel Poudrier","musicianSite":"https://miguiz.bandcamp.com","address":"1224 Av. Taché, Québec, QC, G1R 3B4"}]},{"city":"New York","videos":[{"id":602699692,"musician":"Dylan Nowik","musicianSite":"http://www.dylannowik.com/","address":"Georgetown Plaza, 60 E 8th St., New York, NY, 10003, "},{"id":602698441,"musician":"Dylan Nowik","musicianSite":"http://www.dylannowik.com/","address":"Kimmel Center for University Life, 60 Washington Square S, New York, NY 10012"}]},{"city":"Afyon","videos":[{"id":604967814,"musician":"Ahmet Ali Arslan","musicianSite":"https://open.spotify.com/artist/2fyKy2t7OhlAGDzFSBTxC9","address":"Cahardudayev Cd., 03000 Merkez/Afyonkarahisar"}]},{"city":"Vancouver","videos":[{"id":604960904,"musician":"Iain Howie","musicianSite":"https://soundcloud.com/iainhowi","address":"Creekside Park, 1455 Quebec ST, Vancouver, BC, V6A 3Z7"}]},{"city":"Istanbul","videos":[{"id":604952661,"musician":"Yiğit Soner","musicianSite":"https://soundcloud.com/yigit-soner","address":"Akyol Sokak No: 10, Beyoğlu, İstanbul, 34427","extraInfo":"& Uğur Küpeli"}]},{"city":"Amasya","videos":[{"id":604967893,"musician":"Sumatran Black","musicianSite":"https://sumatranblack.bandcamp.com","address":"Şehzadeler Gezi Yolu, Ziya Paşa Blv., Amasya, 05100"}]},{"city":"Toronto","videos":[{"id":604980383,"musician":"Zaddi Pesino","musicianSite":"https://spectrehearts.bandcamp.com/","address":"61 Centre Island Dock, Toronto, ON, M5J 2E9","overlay":"TLFsmall.png"},{"id":605028385,"musician":"Ammara Wasim & Ismael Ghanim","musicianSite":"","address":"Hanlan\'s Point Ferry Dock, Toronto, ON, M5V 1A1","overlay":"TLFsmall.png"},{"id":605014796,"musician":"Ammara Wasim & Ismael Ghanim","musicianSite":"","address":"Hanlan\'s Point Ferry Dock, Toronto, ON, M5V 1A1","overlay":"TLFsmall.png"},{"id":604995387,"musician":"Sam Tudor","musicianSite":"https://samtudormusic.com/","address":"114 Bond St, Toronto, ON, MB5 1Y2","overlay":"TLFsmall.png"},{"id":604968404,"musician":"Surya Krishnan","musicianSite":"","address":"16 Gould St, Toronto, ON, M5B 1W1","overlay":"TLFsmall.png"},{"id":605000173,"musician":"Andrew Timar","musicianSite":"https://soundcloud.com/vekdinxouolf","address":"300 Victoria St, Toronto, ON, M5B 1W1","overlay":"TLFsmall.png"},{"id":610668025,"musician":"Kerem Ataman","musicianSite":"","address":"Victoria St Lane, Toronto, ON, M5B 1X8","overlay":"TLFsmall.png"},{"id":610639378,"musician":"Dennis Kane","musicianSite":"https://soundcloud.com/denniskane","address":"Victoria St Lane, Toronto, ON, M5B 1X8","overlay":"TLFsmall.png"},{"id":605004760,"musician":"Lenny Cerrone","musicianSite":"http://spyaudio.net","address":"340 University Avenue, Toronto, ON, M5G 1S4","overlay":"TLFsmall.png"},{"id":610716125,"musician":"Pantayo","musicianSite":"https://pantayo.bandcamp.com/","address":"Ryerson Centre for Architecture, 325 Church St, Toronto, ON, M5B 2M2","overlay":"TLFsmall.png"},{"id":610713442,"musician":"Brahny","musicianSite":"https://soundcloud.com/brahny","address":"Ryerson Centre for Architecture, 325 Church St, Toronto, ON, M5B 2M2","overlay":"TLFsmall.png"},{"id":605012558,"musician":"Chris Lozinski","musicianSite":"https://open.spotify.com/artist/2ihtL5TnMkWg31qUCw8PyT","address":"DNA 3 Condos, 1030 King Street West, Toronto, ON, M6K OB4","overlay":"TLFsmall.png"},{"id":605017191,"musician":"Alex Widder","musicianSite":"https://soundcloud.com/alexwidder","address":"Hanlan\'s Point Ferry Dock, Toronto, ON, M5V 1A1","overlay":"TLFsmall.png"},{"id":605020978,"musician":"Bénédicte","musicianSite":"https://benedicte.xyz/","address":"Hanlan\'s Point Ferry Dock, Toronto, ON, M5V 1A1","overlay":"TLFsmall.png"},{"id":604974145,"musician":"MaryCarl Guiao","musicianSite":"https://soundcloud.com/luyosmarycarl","address":"61 Centre Island Dock, Toronto, ON, M5J 2E9","overlay":"TLFsmall.png"},{"id":610655250,"musician":"Andrew Huang","musicianSite":"https://andrewhuang.bandcamp.com/","address":"Lookout Toronto, Toronto, ON, M5J 2E9","overlay":"TLFsmall.png"},{"id":604975797,"musician":"Christine Bougie","musicianSite":"http://www.christinebougie.com/","address":"61 Centre Island Dock, Toronto, ON, M5J 2E9","overlay":"TLFsmall.png"},{"id":605010142,"musician":"Alex Widder","musicianSite":"https://soundcloud.com/alexwidder","address":"Centre Island Dock, Toronto, ON, M5J 2E9","overlay":"TLFsmall.png"},{"id":605005980,"musician":"Alex Widder","musicianSite":"https://soundcloud.com/alexwidder","address":"Centre Island Dock, Toronto, ON, M5J 2E9","overlay":"TLFsmall.png"},{"id":605007859,"musician":"Kayla Milmine","musicianSite":"https://kaylamilmine.bandcamp.com/","address":"Centre Island Dock, Toronto, ON, M5J 2E9","overlay":"TLFsmall.png"},{"id":610673959,"musician":"Of","musicianSite":"https://soundcloud.com/of-of-of","address":"100 Western Battery Road, Toronto, ON, M6K 3R5","overlay":"TLFsmall.png"},{"id":604986571,"musician":"Lenny Cerrone","musicianSite":"http://spyaudio.net","address":"Battery Park Condos, 50 Lynn Williams St, Toronto, ON, M6K 3R9","overlay":"TLFsmall.png"},{"id":610652112,"musician":"Eggplant Purple moves","musicianSite":"https://soundcloud.com/eggplantpurplemoves","address":"Hanna Avenue, Liberty Village, Toronto, ON, M6K 1X4","overlay":"TLFsmall.png"},{"id":604982936,"musician":"Bea Labikova","musicianSite":"http://www.bealabikova.com/","address":"68 Douro St, Toronto, ON M6K 3N4","overlay":"TLFsmall.png"},{"id":604984060,"musician":"Falcxne","musicianSite":"https://soundcloud.com/falcxne","address":"70 Douro St, Toronto, ON M6K 3N4","overlay":"TLFsmall.png"}]}]')}},s={};function c(e){var t=s[e];if(void 0!==t)return t.exports;var n=s[e]={exports:{}};return a[e].call(n.exports,n,n.exports,c),n.exports}c.d=(e,t)=>{for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),c.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},e=c(143),t=c(242),n=c(865),i=c(251),r=c(367),o=function(){(0,i.resumeVideo)()},function(){(0,e.appendStyle)(),(0,n.setMouseMoveEvent)(),(0,e.setRefreshAppListener)(),(0,t.setNavigationsEvents)(),(0,r.initState)(),(0,t.setScreenOrientationEvent)();var a=(0,r.getState)().currentCityVideoList[0];(0,i.initializePlayer)(a.id),document.body.addEventListener("click",o),(0,e.populateDomFields)()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,